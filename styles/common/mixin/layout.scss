
// コンテンツをカラム状に分割
// @param {Number} $breakpoint                   - ブレークポイント（単位つき）
// @param {String} $container                    - Flex コンテナーのセレクタ（一つだけ。「>」は不要）
// @param {String} $item                         - Flex アイテムのセレクタ（一つだけ。「>」は不要）
// @param {Number} $contentWidthNarrow           - ブレークポイント未満時の基準となるコンテンツ幅（単位なし）
// @param {Number} $contentWidthWide             - ブレークポイント以上時の基準となるコンテンツ幅（単位なし）
// @param {Number} $layoutGutterHorizontalNarrow - ブレークポイント未満時のグリッド同士の横方向の間隔（単位なし）
// @param {Number} $layoutGutterVerticalNarrow   - ブレークポイント未満時のグリッド同士の縦方向の間隔（単位なし）
// @param {Number} $layoutGutterHorizontalWide   - ブレークポイント以上時のグリッド同士の横方向の間隔（単位なし）
// @param {Number} $layoutGutterVerticalWide     - ブレークポイント以上時のグリッド同士の縦方向の間隔（単位なし）
// @param {Number} $layoutLoop                   - ループ回数
// ---------------------------------------------------------------------------
@mixin layout(
    $breakpoint:                   $MAJOR_BREAKPOINT,
    $container:                    '',
    $item:                         '',
    $contentWidthNarrow:           355,
    $contentWidthWide:             1040,
    $layoutGutterHorizontalNarrow: 24,
    $layoutGutterVerticalNarrow:   32,
    $layoutGutterHorizontalWide:   32,
    $layoutGutterVerticalWide:     32,
    $layoutLoop:                   6
) {
    // Narrow Viewport
    @include media-query($range: below, $breakpoint: $breakpoint) {
        $gutterHorizontal: percentage($layoutGutterHorizontalNarrow, $contentWidthNarrow);
        $gutterVertical: #{$layoutGutterVerticalNarrow}px;

        &[data-col-narrow] {
            &[data-col-narrow='auto'] {
                $marginIncludedWidth: $contentWidthNarrow + $layoutGutterHorizontalNarrow;

                > #{$container} {
                    display: flex;
                    flex-wrap: wrap;
                    margin: -#{$gutterVertical} 0 0 percentage($layoutGutterHorizontalNarrow, $contentWidthNarrow * -1);
                    width: percentage($marginIncludedWidth, $contentWidthNarrow);

                    > #{$item} {
                        flex: 0 0 auto;
                        height: 100%;
                        margin: $gutterVertical 0 0 percentage($layoutGutterHorizontalNarrow, $marginIncludedWidth);
                        max-width: 100%;
                    }
                }
            }

            &:not([data-col-narrow='auto']) {
                > #{$container} {
                    display: grid;
                    gap: $gutterVertical $gutterHorizontal;

                    > #{$item} {
                        height: 100%;
                        margin: 0;
                    }
                }

                @for $i from 1 through $layoutLoop {
                    &[data-col-narrow='#{$i}'] {
                        > #{$container} {
                            grid-template-columns: repeat($i, 1fr);
                        }
                    }
                }
            }
        }
    }


    // Wide Viewport
    @include media-query($range: above, $breakpoint: $breakpoint) {
        $gutterHorizontal: percentage($layoutGutterHorizontalWide, $contentWidthWide);
        $gutterVertical: #{$layoutGutterVerticalWide}px;

        &[data-col-wide] {
            &[data-col-wide='auto'] {
                $marginIncludedWidth: $contentWidthWide + $layoutGutterHorizontalWide;

                > #{$container} {
                    display: flex;
                    flex-wrap: wrap;
                    margin: -#{$gutterVertical} 0 0 percentage($layoutGutterHorizontalWide, $contentWidthWide * -1);
                    width: percentage($marginIncludedWidth, $contentWidthWide);

                    > #{$item} {
                        flex: 0 0 auto;
                        height: 100%;
                        margin: $gutterVertical 0 0 percentage($layoutGutterHorizontalWide, $marginIncludedWidth);
                        max-width: 100%;
                    }
                }
            }

            &:not([data-col-wide='auto']) {
                > #{$container} {
                    display: grid;
                    gap: $gutterVertical $gutterHorizontal;

                    > #{$item} {
                        height: 100%;
                        margin: 0;
                    }
                }

                @for $i from 1 through $layoutLoop {
                    &[data-col-wide='#{$i}'] {
                        > #{$container} {
                            grid-template-columns: repeat($i, 1fr);
                        }
                    }
                }
            }
        }
    }
}
